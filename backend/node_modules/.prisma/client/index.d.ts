
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Login
 * 
 */
export type Login = $Result.DefaultSelection<Prisma.$LoginPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Aluguel
 * 
 */
export type Aluguel = $Result.DefaultSelection<Prisma.$AluguelPayload>
/**
 * Model Faturado
 * 
 */
export type Faturado = $Result.DefaultSelection<Prisma.$FaturadoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Logins
 * const logins = await prisma.login.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Logins
   * const logins = await prisma.login.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.login`: Exposes CRUD operations for the **Login** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logins
    * const logins = await prisma.login.findMany()
    * ```
    */
  get login(): Prisma.LoginDelegate<ExtArgs>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.aluguel`: Exposes CRUD operations for the **Aluguel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aluguels
    * const aluguels = await prisma.aluguel.findMany()
    * ```
    */
  get aluguel(): Prisma.AluguelDelegate<ExtArgs>;

  /**
   * `prisma.faturado`: Exposes CRUD operations for the **Faturado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faturados
    * const faturados = await prisma.faturado.findMany()
    * ```
    */
  get faturado(): Prisma.FaturadoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Login: 'Login',
    Produto: 'Produto',
    Categoria: 'Categoria',
    Cliente: 'Cliente',
    Aluguel: 'Aluguel',
    Faturado: 'Faturado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'login' | 'produto' | 'categoria' | 'cliente' | 'aluguel' | 'faturado'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Login: {
        payload: Prisma.$LoginPayload<ExtArgs>
        fields: Prisma.LoginFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          findFirst: {
            args: Prisma.LoginFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          findMany: {
            args: Prisma.LoginFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>[]
          }
          create: {
            args: Prisma.LoginCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          createMany: {
            args: Prisma.LoginCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoginDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          update: {
            args: Prisma.LoginUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          deleteMany: {
            args: Prisma.LoginDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoginUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoginUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          aggregate: {
            args: Prisma.LoginAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogin>
          }
          groupBy: {
            args: Prisma.LoginGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoginGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginCountArgs<ExtArgs>,
            result: $Utils.Optional<LoginCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Aluguel: {
        payload: Prisma.$AluguelPayload<ExtArgs>
        fields: Prisma.AluguelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AluguelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AluguelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          findFirst: {
            args: Prisma.AluguelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AluguelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          findMany: {
            args: Prisma.AluguelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>[]
          }
          create: {
            args: Prisma.AluguelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          createMany: {
            args: Prisma.AluguelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AluguelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          update: {
            args: Prisma.AluguelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          deleteMany: {
            args: Prisma.AluguelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AluguelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AluguelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AluguelPayload>
          }
          aggregate: {
            args: Prisma.AluguelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAluguel>
          }
          groupBy: {
            args: Prisma.AluguelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AluguelGroupByOutputType>[]
          }
          count: {
            args: Prisma.AluguelCountArgs<ExtArgs>,
            result: $Utils.Optional<AluguelCountAggregateOutputType> | number
          }
        }
      }
      Faturado: {
        payload: Prisma.$FaturadoPayload<ExtArgs>
        fields: Prisma.FaturadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaturadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaturadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          findFirst: {
            args: Prisma.FaturadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaturadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          findMany: {
            args: Prisma.FaturadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>[]
          }
          create: {
            args: Prisma.FaturadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          createMany: {
            args: Prisma.FaturadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FaturadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          update: {
            args: Prisma.FaturadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          deleteMany: {
            args: Prisma.FaturadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FaturadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FaturadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FaturadoPayload>
          }
          aggregate: {
            args: Prisma.FaturadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFaturado>
          }
          groupBy: {
            args: Prisma.FaturadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FaturadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaturadoCountArgs<ExtArgs>,
            result: $Utils.Optional<FaturadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    ALUGUEIS: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ALUGUEIS?: boolean | ProdutoCountOutputTypeCountALUGUEISArgs
  }

  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountALUGUEISArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AluguelWhereInput
  }



  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    PRODUTOS: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PRODUTOS?: boolean | CategoriaCountOutputTypeCountPRODUTOSArgs
  }

  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountPRODUTOSArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
  }



  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    ALUGUEIS: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ALUGUEIS?: boolean | ClienteCountOutputTypeCountALUGUEISArgs
  }

  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountALUGUEISArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AluguelWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Login
   */

  export type AggregateLogin = {
    _count: LoginCountAggregateOutputType | null
    _avg: LoginAvgAggregateOutputType | null
    _sum: LoginSumAggregateOutputType | null
    _min: LoginMinAggregateOutputType | null
    _max: LoginMaxAggregateOutputType | null
  }

  export type LoginAvgAggregateOutputType = {
    CODUSER: number | null
  }

  export type LoginSumAggregateOutputType = {
    CODUSER: number | null
  }

  export type LoginMinAggregateOutputType = {
    CODUSER: number | null
    USUARIO: string | null
    SENHA: string | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type LoginMaxAggregateOutputType = {
    CODUSER: number | null
    USUARIO: string | null
    SENHA: string | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type LoginCountAggregateOutputType = {
    CODUSER: number
    USUARIO: number
    SENHA: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type LoginAvgAggregateInputType = {
    CODUSER?: true
  }

  export type LoginSumAggregateInputType = {
    CODUSER?: true
  }

  export type LoginMinAggregateInputType = {
    CODUSER?: true
    USUARIO?: true
    SENHA?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type LoginMaxAggregateInputType = {
    CODUSER?: true
    USUARIO?: true
    SENHA?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type LoginCountAggregateInputType = {
    CODUSER?: true
    USUARIO?: true
    SENHA?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type LoginAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Login to aggregate.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logins
    **/
    _count?: true | LoginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginMaxAggregateInputType
  }

  export type GetLoginAggregateType<T extends LoginAggregateArgs> = {
        [P in keyof T & keyof AggregateLogin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogin[P]>
      : GetScalarType<T[P], AggregateLogin[P]>
  }




  export type LoginGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginWhereInput
    orderBy?: LoginOrderByWithAggregationInput | LoginOrderByWithAggregationInput[]
    by: LoginScalarFieldEnum[] | LoginScalarFieldEnum
    having?: LoginScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginCountAggregateInputType | true
    _avg?: LoginAvgAggregateInputType
    _sum?: LoginSumAggregateInputType
    _min?: LoginMinAggregateInputType
    _max?: LoginMaxAggregateInputType
  }

  export type LoginGroupByOutputType = {
    CODUSER: number
    USUARIO: string
    SENHA: string
    DATAINC: Date
    DATAALT: Date | null
    _count: LoginCountAggregateOutputType | null
    _avg: LoginAvgAggregateOutputType | null
    _sum: LoginSumAggregateOutputType | null
    _min: LoginMinAggregateOutputType | null
    _max: LoginMaxAggregateOutputType | null
  }

  type GetLoginGroupByPayload<T extends LoginGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginGroupByOutputType[P]>
            : GetScalarType<T[P], LoginGroupByOutputType[P]>
        }
      >
    >


  export type LoginSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODUSER?: boolean
    USUARIO?: boolean
    SENHA?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }, ExtArgs["result"]["login"]>

  export type LoginSelectScalar = {
    CODUSER?: boolean
    USUARIO?: boolean
    SENHA?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }


  export type $LoginPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Login"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      CODUSER: number
      USUARIO: string
      SENHA: string
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["login"]>
    composites: {}
  }


  type LoginGetPayload<S extends boolean | null | undefined | LoginDefaultArgs> = $Result.GetResult<Prisma.$LoginPayload, S>

  type LoginCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoginFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoginCountAggregateInputType | true
    }

  export interface LoginDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Login'], meta: { name: 'Login' } }
    /**
     * Find zero or one Login that matches the filter.
     * @param {LoginFindUniqueArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoginFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoginFindUniqueArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Login that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoginFindUniqueOrThrowArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoginFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Login that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindFirstArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoginFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginFindFirstArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Login that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindFirstOrThrowArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoginFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Logins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logins
     * const logins = await prisma.login.findMany()
     * 
     * // Get first 10 Logins
     * const logins = await prisma.login.findMany({ take: 10 })
     * 
     * // Only select the `CODUSER`
     * const loginWithCODUSEROnly = await prisma.login.findMany({ select: { CODUSER: true } })
     * 
    **/
    findMany<T extends LoginFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Login.
     * @param {LoginCreateArgs} args - Arguments to create a Login.
     * @example
     * // Create one Login
     * const Login = await prisma.login.create({
     *   data: {
     *     // ... data to create a Login
     *   }
     * })
     * 
    **/
    create<T extends LoginCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoginCreateArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Logins.
     *     @param {LoginCreateManyArgs} args - Arguments to create many Logins.
     *     @example
     *     // Create many Logins
     *     const login = await prisma.login.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoginCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Login.
     * @param {LoginDeleteArgs} args - Arguments to delete one Login.
     * @example
     * // Delete one Login
     * const Login = await prisma.login.delete({
     *   where: {
     *     // ... filter to delete one Login
     *   }
     * })
     * 
    **/
    delete<T extends LoginDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoginDeleteArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Login.
     * @param {LoginUpdateArgs} args - Arguments to update one Login.
     * @example
     * // Update one Login
     * const login = await prisma.login.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoginUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoginUpdateArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Logins.
     * @param {LoginDeleteManyArgs} args - Arguments to filter Logins to delete.
     * @example
     * // Delete a few Logins
     * const { count } = await prisma.login.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoginDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoginDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logins
     * const login = await prisma.login.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoginUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoginUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Login.
     * @param {LoginUpsertArgs} args - Arguments to update or create a Login.
     * @example
     * // Update or create a Login
     * const login = await prisma.login.upsert({
     *   create: {
     *     // ... data to create a Login
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Login we want to update
     *   }
     * })
    **/
    upsert<T extends LoginUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoginUpsertArgs<ExtArgs>>
    ): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginCountArgs} args - Arguments to filter Logins to count.
     * @example
     * // Count the number of Logins
     * const count = await prisma.login.count({
     *   where: {
     *     // ... the filter for the Logins we want to count
     *   }
     * })
    **/
    count<T extends LoginCountArgs>(
      args?: Subset<T, LoginCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAggregateArgs>(args: Subset<T, LoginAggregateArgs>): Prisma.PrismaPromise<GetLoginAggregateType<T>>

    /**
     * Group by Login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginGroupByArgs['orderBy'] }
        : { orderBy?: LoginGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Login model
   */
  readonly fields: LoginFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Login.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Login model
   */ 
  interface LoginFieldRefs {
    readonly CODUSER: FieldRef<"Login", 'Int'>
    readonly USUARIO: FieldRef<"Login", 'String'>
    readonly SENHA: FieldRef<"Login", 'String'>
    readonly DATAINC: FieldRef<"Login", 'DateTime'>
    readonly DATAALT: FieldRef<"Login", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Login findUnique
   */
  export type LoginFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where: LoginWhereUniqueInput
  }


  /**
   * Login findUniqueOrThrow
   */
  export type LoginFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where: LoginWhereUniqueInput
  }


  /**
   * Login findFirst
   */
  export type LoginFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logins.
     */
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }


  /**
   * Login findFirstOrThrow
   */
  export type LoginFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logins.
     */
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }


  /**
   * Login findMany
   */
  export type LoginFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter, which Logins to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }


  /**
   * Login create
   */
  export type LoginCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * The data needed to create a Login.
     */
    data: XOR<LoginCreateInput, LoginUncheckedCreateInput>
  }


  /**
   * Login createMany
   */
  export type LoginCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logins.
     */
    data: LoginCreateManyInput | LoginCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Login update
   */
  export type LoginUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * The data needed to update a Login.
     */
    data: XOR<LoginUpdateInput, LoginUncheckedUpdateInput>
    /**
     * Choose, which Login to update.
     */
    where: LoginWhereUniqueInput
  }


  /**
   * Login updateMany
   */
  export type LoginUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logins.
     */
    data: XOR<LoginUpdateManyMutationInput, LoginUncheckedUpdateManyInput>
    /**
     * Filter which Logins to update
     */
    where?: LoginWhereInput
  }


  /**
   * Login upsert
   */
  export type LoginUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * The filter to search for the Login to update in case it exists.
     */
    where: LoginWhereUniqueInput
    /**
     * In case the Login found by the `where` argument doesn't exist, create a new Login with this data.
     */
    create: XOR<LoginCreateInput, LoginUncheckedCreateInput>
    /**
     * In case the Login was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginUpdateInput, LoginUncheckedUpdateInput>
  }


  /**
   * Login delete
   */
  export type LoginDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Filter which Login to delete.
     */
    where: LoginWhereUniqueInput
  }


  /**
   * Login deleteMany
   */
  export type LoginDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logins to delete
     */
    where?: LoginWhereInput
  }


  /**
   * Login without action
   */
  export type LoginDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
  }



  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    CODPROD: number | null
    STATUS: number | null
    CODCAT: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    CODPROD: number | null
    STATUS: number | null
    CODCAT: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    CODPROD: number | null
    CODIGO: string | null
    DESCRICAO: string | null
    STATUS: number | null
    CODCAT: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type ProdutoMaxAggregateOutputType = {
    CODPROD: number | null
    CODIGO: string | null
    DESCRICAO: string | null
    STATUS: number | null
    CODCAT: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type ProdutoCountAggregateOutputType = {
    CODPROD: number
    CODIGO: number
    DESCRICAO: number
    STATUS: number
    CODCAT: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    CODPROD?: true
    STATUS?: true
    CODCAT?: true
  }

  export type ProdutoSumAggregateInputType = {
    CODPROD?: true
    STATUS?: true
    CODCAT?: true
  }

  export type ProdutoMinAggregateInputType = {
    CODPROD?: true
    CODIGO?: true
    DESCRICAO?: true
    STATUS?: true
    CODCAT?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type ProdutoMaxAggregateInputType = {
    CODPROD?: true
    CODIGO?: true
    DESCRICAO?: true
    STATUS?: true
    CODCAT?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type ProdutoCountAggregateInputType = {
    CODPROD?: true
    CODIGO?: true
    DESCRICAO?: true
    STATUS?: true
    CODCAT?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    CODPROD: number
    CODIGO: string | null
    DESCRICAO: string | null
    STATUS: number | null
    CODCAT: number | null
    DATAINC: Date
    DATAALT: Date | null
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODPROD?: boolean
    CODIGO?: boolean
    DESCRICAO?: boolean
    STATUS?: boolean
    CODCAT?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
    ALUGUEIS?: boolean | Produto$ALUGUEISArgs<ExtArgs>
    CATEGORIA?: boolean | Produto$CATEGORIAArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    CODPROD?: boolean
    CODIGO?: boolean
    DESCRICAO?: boolean
    STATUS?: boolean
    CODCAT?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }

  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ALUGUEIS?: boolean | Produto$ALUGUEISArgs<ExtArgs>
    CATEGORIA?: boolean | Produto$CATEGORIAArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      ALUGUEIS: Prisma.$AluguelPayload<ExtArgs>[]
      CATEGORIA: Prisma.$CategoriaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      CODPROD: number
      CODIGO: string | null
      DESCRICAO: string | null
      STATUS: number | null
      CODCAT: number | null
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }


  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `CODPROD`
     * const produtoWithCODPRODOnly = await prisma.produto.findMany({ select: { CODPROD: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produtos.
     *     @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ALUGUEIS<T extends Produto$ALUGUEISArgs<ExtArgs> = {}>(args?: Subset<T, Produto$ALUGUEISArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findMany'> | Null>;

    CATEGORIA<T extends Produto$CATEGORIAArgs<ExtArgs> = {}>(args?: Subset<T, Produto$CATEGORIAArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly CODPROD: FieldRef<"Produto", 'Int'>
    readonly CODIGO: FieldRef<"Produto", 'String'>
    readonly DESCRICAO: FieldRef<"Produto", 'String'>
    readonly STATUS: FieldRef<"Produto", 'Int'>
    readonly CODCAT: FieldRef<"Produto", 'Int'>
    readonly DATAINC: FieldRef<"Produto", 'DateTime'>
    readonly DATAALT: FieldRef<"Produto", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data?: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto.ALUGUEIS
   */
  export type Produto$ALUGUEISArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    where?: AluguelWhereInput
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    cursor?: AluguelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }


  /**
   * Produto.CATEGORIA
   */
  export type Produto$CATEGORIAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    where?: CategoriaWhereInput
  }


  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
  }



  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    CODCAT: number | null
    STATUS: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    CODCAT: number | null
    STATUS: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    CODCAT: number | null
    DESCRICAO: string | null
    STATUS: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type CategoriaMaxAggregateOutputType = {
    CODCAT: number | null
    DESCRICAO: string | null
    STATUS: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type CategoriaCountAggregateOutputType = {
    CODCAT: number
    DESCRICAO: number
    STATUS: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    CODCAT?: true
    STATUS?: true
  }

  export type CategoriaSumAggregateInputType = {
    CODCAT?: true
    STATUS?: true
  }

  export type CategoriaMinAggregateInputType = {
    CODCAT?: true
    DESCRICAO?: true
    STATUS?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type CategoriaMaxAggregateInputType = {
    CODCAT?: true
    DESCRICAO?: true
    STATUS?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type CategoriaCountAggregateInputType = {
    CODCAT?: true
    DESCRICAO?: true
    STATUS?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    CODCAT: number
    DESCRICAO: string
    STATUS: number | null
    DATAINC: Date
    DATAALT: Date | null
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODCAT?: boolean
    DESCRICAO?: boolean
    STATUS?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
    PRODUTOS?: boolean | Categoria$PRODUTOSArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectScalar = {
    CODCAT?: boolean
    DESCRICAO?: boolean
    STATUS?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PRODUTOS?: boolean | Categoria$PRODUTOSArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      PRODUTOS: Prisma.$ProdutoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CODCAT: number
      DESCRICAO: string
      STATUS: number | null
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `CODCAT`
     * const categoriaWithCODCATOnly = await prisma.categoria.findMany({ select: { CODCAT: true } })
     * 
    **/
    findMany<T extends CategoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends CategoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends CategoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PRODUTOS<T extends Categoria$PRODUTOSArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$PRODUTOSArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly CODCAT: FieldRef<"Categoria", 'Int'>
    readonly DESCRICAO: FieldRef<"Categoria", 'String'>
    readonly STATUS: FieldRef<"Categoria", 'Int'>
    readonly DATAINC: FieldRef<"Categoria", 'DateTime'>
    readonly DATAALT: FieldRef<"Categoria", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }


  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }


  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria.PRODUTOS
   */
  export type Categoria$PRODUTOSArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
  }



  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    CODCLI: number | null
  }

  export type ClienteSumAggregateOutputType = {
    CODCLI: number | null
  }

  export type ClienteMinAggregateOutputType = {
    CODCLI: number | null
    NOME: string | null
    CONTATO: string | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type ClienteMaxAggregateOutputType = {
    CODCLI: number | null
    NOME: string | null
    CONTATO: string | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type ClienteCountAggregateOutputType = {
    CODCLI: number
    NOME: number
    CONTATO: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    CODCLI?: true
  }

  export type ClienteSumAggregateInputType = {
    CODCLI?: true
  }

  export type ClienteMinAggregateInputType = {
    CODCLI?: true
    NOME?: true
    CONTATO?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type ClienteMaxAggregateInputType = {
    CODCLI?: true
    NOME?: true
    CONTATO?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type ClienteCountAggregateInputType = {
    CODCLI?: true
    NOME?: true
    CONTATO?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    CODCLI: number
    NOME: string
    CONTATO: string
    DATAINC: Date
    DATAALT: Date | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODCLI?: boolean
    NOME?: boolean
    CONTATO?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
    ALUGUEIS?: boolean | Cliente$ALUGUEISArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    CODCLI?: boolean
    NOME?: boolean
    CONTATO?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ALUGUEIS?: boolean | Cliente$ALUGUEISArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      ALUGUEIS: Prisma.$AluguelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CODCLI: number
      NOME: string
      CONTATO: string
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }


  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `CODCLI`
     * const clienteWithCODCLIOnly = await prisma.cliente.findMany({ select: { CODCLI: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ALUGUEIS<T extends Cliente$ALUGUEISArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$ALUGUEISArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly CODCLI: FieldRef<"Cliente", 'Int'>
    readonly NOME: FieldRef<"Cliente", 'String'>
    readonly CONTATO: FieldRef<"Cliente", 'String'>
    readonly DATAINC: FieldRef<"Cliente", 'DateTime'>
    readonly DATAALT: FieldRef<"Cliente", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente.ALUGUEIS
   */
  export type Cliente$ALUGUEISArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    where?: AluguelWhereInput
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    cursor?: AluguelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }


  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
  }



  /**
   * Model Aluguel
   */

  export type AggregateAluguel = {
    _count: AluguelCountAggregateOutputType | null
    _avg: AluguelAvgAggregateOutputType | null
    _sum: AluguelSumAggregateOutputType | null
    _min: AluguelMinAggregateOutputType | null
    _max: AluguelMaxAggregateOutputType | null
  }

  export type AluguelAvgAggregateOutputType = {
    CODALU: number | null
    STATUS: number | null
    PRECOINICIAL: number | null
    CODCLI: number | null
    CODPROD: number | null
  }

  export type AluguelSumAggregateOutputType = {
    CODALU: number | null
    STATUS: number | null
    PRECOINICIAL: number | null
    CODCLI: number | null
    CODPROD: number | null
  }

  export type AluguelMinAggregateOutputType = {
    CODALU: number | null
    STATUS: number | null
    DATAINICIO: Date | null
    DATAFINAL: Date | null
    ENDERECO: string | null
    PRECOINICIAL: number | null
    CODCLI: number | null
    CODPROD: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type AluguelMaxAggregateOutputType = {
    CODALU: number | null
    STATUS: number | null
    DATAINICIO: Date | null
    DATAFINAL: Date | null
    ENDERECO: string | null
    PRECOINICIAL: number | null
    CODCLI: number | null
    CODPROD: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type AluguelCountAggregateOutputType = {
    CODALU: number
    STATUS: number
    DATAINICIO: number
    DATAFINAL: number
    ENDERECO: number
    PRECOINICIAL: number
    CODCLI: number
    CODPROD: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type AluguelAvgAggregateInputType = {
    CODALU?: true
    STATUS?: true
    PRECOINICIAL?: true
    CODCLI?: true
    CODPROD?: true
  }

  export type AluguelSumAggregateInputType = {
    CODALU?: true
    STATUS?: true
    PRECOINICIAL?: true
    CODCLI?: true
    CODPROD?: true
  }

  export type AluguelMinAggregateInputType = {
    CODALU?: true
    STATUS?: true
    DATAINICIO?: true
    DATAFINAL?: true
    ENDERECO?: true
    PRECOINICIAL?: true
    CODCLI?: true
    CODPROD?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type AluguelMaxAggregateInputType = {
    CODALU?: true
    STATUS?: true
    DATAINICIO?: true
    DATAFINAL?: true
    ENDERECO?: true
    PRECOINICIAL?: true
    CODCLI?: true
    CODPROD?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type AluguelCountAggregateInputType = {
    CODALU?: true
    STATUS?: true
    DATAINICIO?: true
    DATAFINAL?: true
    ENDERECO?: true
    PRECOINICIAL?: true
    CODCLI?: true
    CODPROD?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type AluguelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aluguel to aggregate.
     */
    where?: AluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aluguels to fetch.
     */
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aluguels
    **/
    _count?: true | AluguelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AluguelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AluguelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AluguelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AluguelMaxAggregateInputType
  }

  export type GetAluguelAggregateType<T extends AluguelAggregateArgs> = {
        [P in keyof T & keyof AggregateAluguel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluguel[P]>
      : GetScalarType<T[P], AggregateAluguel[P]>
  }




  export type AluguelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AluguelWhereInput
    orderBy?: AluguelOrderByWithAggregationInput | AluguelOrderByWithAggregationInput[]
    by: AluguelScalarFieldEnum[] | AluguelScalarFieldEnum
    having?: AluguelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AluguelCountAggregateInputType | true
    _avg?: AluguelAvgAggregateInputType
    _sum?: AluguelSumAggregateInputType
    _min?: AluguelMinAggregateInputType
    _max?: AluguelMaxAggregateInputType
  }

  export type AluguelGroupByOutputType = {
    CODALU: number
    STATUS: number | null
    DATAINICIO: Date
    DATAFINAL: Date
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI: number | null
    CODPROD: number | null
    DATAINC: Date
    DATAALT: Date | null
    _count: AluguelCountAggregateOutputType | null
    _avg: AluguelAvgAggregateOutputType | null
    _sum: AluguelSumAggregateOutputType | null
    _min: AluguelMinAggregateOutputType | null
    _max: AluguelMaxAggregateOutputType | null
  }

  type GetAluguelGroupByPayload<T extends AluguelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AluguelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AluguelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AluguelGroupByOutputType[P]>
            : GetScalarType<T[P], AluguelGroupByOutputType[P]>
        }
      >
    >


  export type AluguelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODALU?: boolean
    STATUS?: boolean
    DATAINICIO?: boolean
    DATAFINAL?: boolean
    ENDERECO?: boolean
    PRECOINICIAL?: boolean
    CODCLI?: boolean
    CODPROD?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
    CLIENTE?: boolean | Aluguel$CLIENTEArgs<ExtArgs>
    PRODUTO?: boolean | Aluguel$PRODUTOArgs<ExtArgs>
    FATURADO?: boolean | Aluguel$FATURADOArgs<ExtArgs>
  }, ExtArgs["result"]["aluguel"]>

  export type AluguelSelectScalar = {
    CODALU?: boolean
    STATUS?: boolean
    DATAINICIO?: boolean
    DATAFINAL?: boolean
    ENDERECO?: boolean
    PRECOINICIAL?: boolean
    CODCLI?: boolean
    CODPROD?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }

  export type AluguelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CLIENTE?: boolean | Aluguel$CLIENTEArgs<ExtArgs>
    PRODUTO?: boolean | Aluguel$PRODUTOArgs<ExtArgs>
    FATURADO?: boolean | Aluguel$FATURADOArgs<ExtArgs>
  }


  export type $AluguelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aluguel"
    objects: {
      CLIENTE: Prisma.$ClientePayload<ExtArgs> | null
      PRODUTO: Prisma.$ProdutoPayload<ExtArgs> | null
      FATURADO: Prisma.$FaturadoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      CODALU: number
      STATUS: number | null
      DATAINICIO: Date
      DATAFINAL: Date
      ENDERECO: string
      PRECOINICIAL: number
      CODCLI: number | null
      CODPROD: number | null
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["aluguel"]>
    composites: {}
  }


  type AluguelGetPayload<S extends boolean | null | undefined | AluguelDefaultArgs> = $Result.GetResult<Prisma.$AluguelPayload, S>

  type AluguelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AluguelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AluguelCountAggregateInputType | true
    }

  export interface AluguelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aluguel'], meta: { name: 'Aluguel' } }
    /**
     * Find zero or one Aluguel that matches the filter.
     * @param {AluguelFindUniqueArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AluguelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelFindUniqueArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aluguel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AluguelFindUniqueOrThrowArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AluguelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aluguel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelFindFirstArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AluguelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelFindFirstArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aluguel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelFindFirstOrThrowArgs} args - Arguments to find a Aluguel
     * @example
     * // Get one Aluguel
     * const aluguel = await prisma.aluguel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AluguelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aluguels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aluguels
     * const aluguels = await prisma.aluguel.findMany()
     * 
     * // Get first 10 Aluguels
     * const aluguels = await prisma.aluguel.findMany({ take: 10 })
     * 
     * // Only select the `CODALU`
     * const aluguelWithCODALUOnly = await prisma.aluguel.findMany({ select: { CODALU: true } })
     * 
    **/
    findMany<T extends AluguelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aluguel.
     * @param {AluguelCreateArgs} args - Arguments to create a Aluguel.
     * @example
     * // Create one Aluguel
     * const Aluguel = await prisma.aluguel.create({
     *   data: {
     *     // ... data to create a Aluguel
     *   }
     * })
     * 
    **/
    create<T extends AluguelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelCreateArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aluguels.
     *     @param {AluguelCreateManyArgs} args - Arguments to create many Aluguels.
     *     @example
     *     // Create many Aluguels
     *     const aluguel = await prisma.aluguel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AluguelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aluguel.
     * @param {AluguelDeleteArgs} args - Arguments to delete one Aluguel.
     * @example
     * // Delete one Aluguel
     * const Aluguel = await prisma.aluguel.delete({
     *   where: {
     *     // ... filter to delete one Aluguel
     *   }
     * })
     * 
    **/
    delete<T extends AluguelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelDeleteArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aluguel.
     * @param {AluguelUpdateArgs} args - Arguments to update one Aluguel.
     * @example
     * // Update one Aluguel
     * const aluguel = await prisma.aluguel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AluguelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelUpdateArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aluguels.
     * @param {AluguelDeleteManyArgs} args - Arguments to filter Aluguels to delete.
     * @example
     * // Delete a few Aluguels
     * const { count } = await prisma.aluguel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AluguelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AluguelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aluguels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aluguels
     * const aluguel = await prisma.aluguel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AluguelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluguel.
     * @param {AluguelUpsertArgs} args - Arguments to update or create a Aluguel.
     * @example
     * // Update or create a Aluguel
     * const aluguel = await prisma.aluguel.upsert({
     *   create: {
     *     // ... data to create a Aluguel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluguel we want to update
     *   }
     * })
    **/
    upsert<T extends AluguelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AluguelUpsertArgs<ExtArgs>>
    ): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aluguels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelCountArgs} args - Arguments to filter Aluguels to count.
     * @example
     * // Count the number of Aluguels
     * const count = await prisma.aluguel.count({
     *   where: {
     *     // ... the filter for the Aluguels we want to count
     *   }
     * })
    **/
    count<T extends AluguelCountArgs>(
      args?: Subset<T, AluguelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AluguelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluguel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AluguelAggregateArgs>(args: Subset<T, AluguelAggregateArgs>): Prisma.PrismaPromise<GetAluguelAggregateType<T>>

    /**
     * Group by Aluguel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AluguelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AluguelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AluguelGroupByArgs['orderBy'] }
        : { orderBy?: AluguelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AluguelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAluguelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aluguel model
   */
  readonly fields: AluguelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aluguel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AluguelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CLIENTE<T extends Aluguel$CLIENTEArgs<ExtArgs> = {}>(args?: Subset<T, Aluguel$CLIENTEArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    PRODUTO<T extends Aluguel$PRODUTOArgs<ExtArgs> = {}>(args?: Subset<T, Aluguel$PRODUTOArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    FATURADO<T extends Aluguel$FATURADOArgs<ExtArgs> = {}>(args?: Subset<T, Aluguel$FATURADOArgs<ExtArgs>>): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aluguel model
   */ 
  interface AluguelFieldRefs {
    readonly CODALU: FieldRef<"Aluguel", 'Int'>
    readonly STATUS: FieldRef<"Aluguel", 'Int'>
    readonly DATAINICIO: FieldRef<"Aluguel", 'DateTime'>
    readonly DATAFINAL: FieldRef<"Aluguel", 'DateTime'>
    readonly ENDERECO: FieldRef<"Aluguel", 'String'>
    readonly PRECOINICIAL: FieldRef<"Aluguel", 'Float'>
    readonly CODCLI: FieldRef<"Aluguel", 'Int'>
    readonly CODPROD: FieldRef<"Aluguel", 'Int'>
    readonly DATAINC: FieldRef<"Aluguel", 'DateTime'>
    readonly DATAALT: FieldRef<"Aluguel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Aluguel findUnique
   */
  export type AluguelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter, which Aluguel to fetch.
     */
    where: AluguelWhereUniqueInput
  }


  /**
   * Aluguel findUniqueOrThrow
   */
  export type AluguelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter, which Aluguel to fetch.
     */
    where: AluguelWhereUniqueInput
  }


  /**
   * Aluguel findFirst
   */
  export type AluguelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter, which Aluguel to fetch.
     */
    where?: AluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aluguels to fetch.
     */
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aluguels.
     */
    cursor?: AluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aluguels.
     */
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }


  /**
   * Aluguel findFirstOrThrow
   */
  export type AluguelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter, which Aluguel to fetch.
     */
    where?: AluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aluguels to fetch.
     */
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aluguels.
     */
    cursor?: AluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aluguels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aluguels.
     */
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }


  /**
   * Aluguel findMany
   */
  export type AluguelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter, which Aluguels to fetch.
     */
    where?: AluguelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aluguels to fetch.
     */
    orderBy?: AluguelOrderByWithRelationInput | AluguelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aluguels.
     */
    cursor?: AluguelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aluguels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aluguels.
     */
    skip?: number
    distinct?: AluguelScalarFieldEnum | AluguelScalarFieldEnum[]
  }


  /**
   * Aluguel create
   */
  export type AluguelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * The data needed to create a Aluguel.
     */
    data: XOR<AluguelCreateInput, AluguelUncheckedCreateInput>
  }


  /**
   * Aluguel createMany
   */
  export type AluguelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aluguels.
     */
    data: AluguelCreateManyInput | AluguelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Aluguel update
   */
  export type AluguelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * The data needed to update a Aluguel.
     */
    data: XOR<AluguelUpdateInput, AluguelUncheckedUpdateInput>
    /**
     * Choose, which Aluguel to update.
     */
    where: AluguelWhereUniqueInput
  }


  /**
   * Aluguel updateMany
   */
  export type AluguelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aluguels.
     */
    data: XOR<AluguelUpdateManyMutationInput, AluguelUncheckedUpdateManyInput>
    /**
     * Filter which Aluguels to update
     */
    where?: AluguelWhereInput
  }


  /**
   * Aluguel upsert
   */
  export type AluguelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * The filter to search for the Aluguel to update in case it exists.
     */
    where: AluguelWhereUniqueInput
    /**
     * In case the Aluguel found by the `where` argument doesn't exist, create a new Aluguel with this data.
     */
    create: XOR<AluguelCreateInput, AluguelUncheckedCreateInput>
    /**
     * In case the Aluguel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AluguelUpdateInput, AluguelUncheckedUpdateInput>
  }


  /**
   * Aluguel delete
   */
  export type AluguelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    /**
     * Filter which Aluguel to delete.
     */
    where: AluguelWhereUniqueInput
  }


  /**
   * Aluguel deleteMany
   */
  export type AluguelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aluguels to delete
     */
    where?: AluguelWhereInput
  }


  /**
   * Aluguel.CLIENTE
   */
  export type Aluguel$CLIENTEArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }


  /**
   * Aluguel.PRODUTO
   */
  export type Aluguel$PRODUTOArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
  }


  /**
   * Aluguel.FATURADO
   */
  export type Aluguel$FATURADOArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    where?: FaturadoWhereInput
  }


  /**
   * Aluguel without action
   */
  export type AluguelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
  }



  /**
   * Model Faturado
   */

  export type AggregateFaturado = {
    _count: FaturadoCountAggregateOutputType | null
    _avg: FaturadoAvgAggregateOutputType | null
    _sum: FaturadoSumAggregateOutputType | null
    _min: FaturadoMinAggregateOutputType | null
    _max: FaturadoMaxAggregateOutputType | null
  }

  export type FaturadoAvgAggregateOutputType = {
    CODFAT: number | null
    CUSTO: number | null
    PRECOFINAL: number | null
    CODALU: number | null
  }

  export type FaturadoSumAggregateOutputType = {
    CODFAT: number | null
    CUSTO: number | null
    PRECOFINAL: number | null
    CODALU: number | null
  }

  export type FaturadoMinAggregateOutputType = {
    CODFAT: number | null
    CUSTO: number | null
    PRECOFINAL: number | null
    DATAFATURADO: Date | null
    CODALU: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type FaturadoMaxAggregateOutputType = {
    CODFAT: number | null
    CUSTO: number | null
    PRECOFINAL: number | null
    DATAFATURADO: Date | null
    CODALU: number | null
    DATAINC: Date | null
    DATAALT: Date | null
  }

  export type FaturadoCountAggregateOutputType = {
    CODFAT: number
    CUSTO: number
    PRECOFINAL: number
    DATAFATURADO: number
    CODALU: number
    DATAINC: number
    DATAALT: number
    _all: number
  }


  export type FaturadoAvgAggregateInputType = {
    CODFAT?: true
    CUSTO?: true
    PRECOFINAL?: true
    CODALU?: true
  }

  export type FaturadoSumAggregateInputType = {
    CODFAT?: true
    CUSTO?: true
    PRECOFINAL?: true
    CODALU?: true
  }

  export type FaturadoMinAggregateInputType = {
    CODFAT?: true
    CUSTO?: true
    PRECOFINAL?: true
    DATAFATURADO?: true
    CODALU?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type FaturadoMaxAggregateInputType = {
    CODFAT?: true
    CUSTO?: true
    PRECOFINAL?: true
    DATAFATURADO?: true
    CODALU?: true
    DATAINC?: true
    DATAALT?: true
  }

  export type FaturadoCountAggregateInputType = {
    CODFAT?: true
    CUSTO?: true
    PRECOFINAL?: true
    DATAFATURADO?: true
    CODALU?: true
    DATAINC?: true
    DATAALT?: true
    _all?: true
  }

  export type FaturadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faturado to aggregate.
     */
    where?: FaturadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturados to fetch.
     */
    orderBy?: FaturadoOrderByWithRelationInput | FaturadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaturadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faturados
    **/
    _count?: true | FaturadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaturadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaturadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaturadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaturadoMaxAggregateInputType
  }

  export type GetFaturadoAggregateType<T extends FaturadoAggregateArgs> = {
        [P in keyof T & keyof AggregateFaturado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaturado[P]>
      : GetScalarType<T[P], AggregateFaturado[P]>
  }




  export type FaturadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaturadoWhereInput
    orderBy?: FaturadoOrderByWithAggregationInput | FaturadoOrderByWithAggregationInput[]
    by: FaturadoScalarFieldEnum[] | FaturadoScalarFieldEnum
    having?: FaturadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaturadoCountAggregateInputType | true
    _avg?: FaturadoAvgAggregateInputType
    _sum?: FaturadoSumAggregateInputType
    _min?: FaturadoMinAggregateInputType
    _max?: FaturadoMaxAggregateInputType
  }

  export type FaturadoGroupByOutputType = {
    CODFAT: number
    CUSTO: number | null
    PRECOFINAL: number
    DATAFATURADO: Date
    CODALU: number | null
    DATAINC: Date
    DATAALT: Date | null
    _count: FaturadoCountAggregateOutputType | null
    _avg: FaturadoAvgAggregateOutputType | null
    _sum: FaturadoSumAggregateOutputType | null
    _min: FaturadoMinAggregateOutputType | null
    _max: FaturadoMaxAggregateOutputType | null
  }

  type GetFaturadoGroupByPayload<T extends FaturadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaturadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaturadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaturadoGroupByOutputType[P]>
            : GetScalarType<T[P], FaturadoGroupByOutputType[P]>
        }
      >
    >


  export type FaturadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CODFAT?: boolean
    CUSTO?: boolean
    PRECOFINAL?: boolean
    DATAFATURADO?: boolean
    CODALU?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
    ALUGUEL?: boolean | Faturado$ALUGUELArgs<ExtArgs>
  }, ExtArgs["result"]["faturado"]>

  export type FaturadoSelectScalar = {
    CODFAT?: boolean
    CUSTO?: boolean
    PRECOFINAL?: boolean
    DATAFATURADO?: boolean
    CODALU?: boolean
    DATAINC?: boolean
    DATAALT?: boolean
  }

  export type FaturadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ALUGUEL?: boolean | Faturado$ALUGUELArgs<ExtArgs>
  }


  export type $FaturadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faturado"
    objects: {
      ALUGUEL: Prisma.$AluguelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      CODFAT: number
      CUSTO: number | null
      PRECOFINAL: number
      DATAFATURADO: Date
      CODALU: number | null
      DATAINC: Date
      DATAALT: Date | null
    }, ExtArgs["result"]["faturado"]>
    composites: {}
  }


  type FaturadoGetPayload<S extends boolean | null | undefined | FaturadoDefaultArgs> = $Result.GetResult<Prisma.$FaturadoPayload, S>

  type FaturadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FaturadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FaturadoCountAggregateInputType | true
    }

  export interface FaturadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faturado'], meta: { name: 'Faturado' } }
    /**
     * Find zero or one Faturado that matches the filter.
     * @param {FaturadoFindUniqueArgs} args - Arguments to find a Faturado
     * @example
     * // Get one Faturado
     * const faturado = await prisma.faturado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FaturadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoFindUniqueArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Faturado that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FaturadoFindUniqueOrThrowArgs} args - Arguments to find a Faturado
     * @example
     * // Get one Faturado
     * const faturado = await prisma.faturado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FaturadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Faturado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoFindFirstArgs} args - Arguments to find a Faturado
     * @example
     * // Get one Faturado
     * const faturado = await prisma.faturado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FaturadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoFindFirstArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Faturado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoFindFirstOrThrowArgs} args - Arguments to find a Faturado
     * @example
     * // Get one Faturado
     * const faturado = await prisma.faturado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FaturadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Faturados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faturados
     * const faturados = await prisma.faturado.findMany()
     * 
     * // Get first 10 Faturados
     * const faturados = await prisma.faturado.findMany({ take: 10 })
     * 
     * // Only select the `CODFAT`
     * const faturadoWithCODFATOnly = await prisma.faturado.findMany({ select: { CODFAT: true } })
     * 
    **/
    findMany<T extends FaturadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Faturado.
     * @param {FaturadoCreateArgs} args - Arguments to create a Faturado.
     * @example
     * // Create one Faturado
     * const Faturado = await prisma.faturado.create({
     *   data: {
     *     // ... data to create a Faturado
     *   }
     * })
     * 
    **/
    create<T extends FaturadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoCreateArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Faturados.
     *     @param {FaturadoCreateManyArgs} args - Arguments to create many Faturados.
     *     @example
     *     // Create many Faturados
     *     const faturado = await prisma.faturado.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FaturadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Faturado.
     * @param {FaturadoDeleteArgs} args - Arguments to delete one Faturado.
     * @example
     * // Delete one Faturado
     * const Faturado = await prisma.faturado.delete({
     *   where: {
     *     // ... filter to delete one Faturado
     *   }
     * })
     * 
    **/
    delete<T extends FaturadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoDeleteArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Faturado.
     * @param {FaturadoUpdateArgs} args - Arguments to update one Faturado.
     * @example
     * // Update one Faturado
     * const faturado = await prisma.faturado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FaturadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoUpdateArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Faturados.
     * @param {FaturadoDeleteManyArgs} args - Arguments to filter Faturados to delete.
     * @example
     * // Delete a few Faturados
     * const { count } = await prisma.faturado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FaturadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FaturadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faturados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faturados
     * const faturado = await prisma.faturado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FaturadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faturado.
     * @param {FaturadoUpsertArgs} args - Arguments to update or create a Faturado.
     * @example
     * // Update or create a Faturado
     * const faturado = await prisma.faturado.upsert({
     *   create: {
     *     // ... data to create a Faturado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faturado we want to update
     *   }
     * })
    **/
    upsert<T extends FaturadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FaturadoUpsertArgs<ExtArgs>>
    ): Prisma__FaturadoClient<$Result.GetResult<Prisma.$FaturadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Faturados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoCountArgs} args - Arguments to filter Faturados to count.
     * @example
     * // Count the number of Faturados
     * const count = await prisma.faturado.count({
     *   where: {
     *     // ... the filter for the Faturados we want to count
     *   }
     * })
    **/
    count<T extends FaturadoCountArgs>(
      args?: Subset<T, FaturadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaturadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faturado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaturadoAggregateArgs>(args: Subset<T, FaturadoAggregateArgs>): Prisma.PrismaPromise<GetFaturadoAggregateType<T>>

    /**
     * Group by Faturado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaturadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaturadoGroupByArgs['orderBy'] }
        : { orderBy?: FaturadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaturadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaturadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faturado model
   */
  readonly fields: FaturadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faturado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaturadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ALUGUEL<T extends Faturado$ALUGUELArgs<ExtArgs> = {}>(args?: Subset<T, Faturado$ALUGUELArgs<ExtArgs>>): Prisma__AluguelClient<$Result.GetResult<Prisma.$AluguelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Faturado model
   */ 
  interface FaturadoFieldRefs {
    readonly CODFAT: FieldRef<"Faturado", 'Int'>
    readonly CUSTO: FieldRef<"Faturado", 'Float'>
    readonly PRECOFINAL: FieldRef<"Faturado", 'Float'>
    readonly DATAFATURADO: FieldRef<"Faturado", 'DateTime'>
    readonly CODALU: FieldRef<"Faturado", 'Int'>
    readonly DATAINC: FieldRef<"Faturado", 'DateTime'>
    readonly DATAALT: FieldRef<"Faturado", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Faturado findUnique
   */
  export type FaturadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter, which Faturado to fetch.
     */
    where: FaturadoWhereUniqueInput
  }


  /**
   * Faturado findUniqueOrThrow
   */
  export type FaturadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter, which Faturado to fetch.
     */
    where: FaturadoWhereUniqueInput
  }


  /**
   * Faturado findFirst
   */
  export type FaturadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter, which Faturado to fetch.
     */
    where?: FaturadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturados to fetch.
     */
    orderBy?: FaturadoOrderByWithRelationInput | FaturadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faturados.
     */
    cursor?: FaturadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faturados.
     */
    distinct?: FaturadoScalarFieldEnum | FaturadoScalarFieldEnum[]
  }


  /**
   * Faturado findFirstOrThrow
   */
  export type FaturadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter, which Faturado to fetch.
     */
    where?: FaturadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturados to fetch.
     */
    orderBy?: FaturadoOrderByWithRelationInput | FaturadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faturados.
     */
    cursor?: FaturadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faturados.
     */
    distinct?: FaturadoScalarFieldEnum | FaturadoScalarFieldEnum[]
  }


  /**
   * Faturado findMany
   */
  export type FaturadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter, which Faturados to fetch.
     */
    where?: FaturadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturados to fetch.
     */
    orderBy?: FaturadoOrderByWithRelationInput | FaturadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faturados.
     */
    cursor?: FaturadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturados.
     */
    skip?: number
    distinct?: FaturadoScalarFieldEnum | FaturadoScalarFieldEnum[]
  }


  /**
   * Faturado create
   */
  export type FaturadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Faturado.
     */
    data: XOR<FaturadoCreateInput, FaturadoUncheckedCreateInput>
  }


  /**
   * Faturado createMany
   */
  export type FaturadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faturados.
     */
    data: FaturadoCreateManyInput | FaturadoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Faturado update
   */
  export type FaturadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Faturado.
     */
    data: XOR<FaturadoUpdateInput, FaturadoUncheckedUpdateInput>
    /**
     * Choose, which Faturado to update.
     */
    where: FaturadoWhereUniqueInput
  }


  /**
   * Faturado updateMany
   */
  export type FaturadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faturados.
     */
    data: XOR<FaturadoUpdateManyMutationInput, FaturadoUncheckedUpdateManyInput>
    /**
     * Filter which Faturados to update
     */
    where?: FaturadoWhereInput
  }


  /**
   * Faturado upsert
   */
  export type FaturadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Faturado to update in case it exists.
     */
    where: FaturadoWhereUniqueInput
    /**
     * In case the Faturado found by the `where` argument doesn't exist, create a new Faturado with this data.
     */
    create: XOR<FaturadoCreateInput, FaturadoUncheckedCreateInput>
    /**
     * In case the Faturado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaturadoUpdateInput, FaturadoUncheckedUpdateInput>
  }


  /**
   * Faturado delete
   */
  export type FaturadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
    /**
     * Filter which Faturado to delete.
     */
    where: FaturadoWhereUniqueInput
  }


  /**
   * Faturado deleteMany
   */
  export type FaturadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faturados to delete
     */
    where?: FaturadoWhereInput
  }


  /**
   * Faturado.ALUGUEL
   */
  export type Faturado$ALUGUELArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluguel
     */
    select?: AluguelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AluguelInclude<ExtArgs> | null
    where?: AluguelWhereInput
  }


  /**
   * Faturado without action
   */
  export type FaturadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faturado
     */
    select?: FaturadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturadoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LoginScalarFieldEnum: {
    CODUSER: 'CODUSER',
    USUARIO: 'USUARIO',
    SENHA: 'SENHA',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type LoginScalarFieldEnum = (typeof LoginScalarFieldEnum)[keyof typeof LoginScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    CODPROD: 'CODPROD',
    CODIGO: 'CODIGO',
    DESCRICAO: 'DESCRICAO',
    STATUS: 'STATUS',
    CODCAT: 'CODCAT',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    CODCAT: 'CODCAT',
    DESCRICAO: 'DESCRICAO',
    STATUS: 'STATUS',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    CODCLI: 'CODCLI',
    NOME: 'NOME',
    CONTATO: 'CONTATO',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const AluguelScalarFieldEnum: {
    CODALU: 'CODALU',
    STATUS: 'STATUS',
    DATAINICIO: 'DATAINICIO',
    DATAFINAL: 'DATAFINAL',
    ENDERECO: 'ENDERECO',
    PRECOINICIAL: 'PRECOINICIAL',
    CODCLI: 'CODCLI',
    CODPROD: 'CODPROD',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type AluguelScalarFieldEnum = (typeof AluguelScalarFieldEnum)[keyof typeof AluguelScalarFieldEnum]


  export const FaturadoScalarFieldEnum: {
    CODFAT: 'CODFAT',
    CUSTO: 'CUSTO',
    PRECOFINAL: 'PRECOFINAL',
    DATAFATURADO: 'DATAFATURADO',
    CODALU: 'CODALU',
    DATAINC: 'DATAINC',
    DATAALT: 'DATAALT'
  };

  export type FaturadoScalarFieldEnum = (typeof FaturadoScalarFieldEnum)[keyof typeof FaturadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type LoginWhereInput = {
    AND?: LoginWhereInput | LoginWhereInput[]
    OR?: LoginWhereInput[]
    NOT?: LoginWhereInput | LoginWhereInput[]
    CODUSER?: IntFilter<"Login"> | number
    USUARIO?: StringFilter<"Login"> | string
    SENHA?: StringFilter<"Login"> | string
    DATAINC?: DateTimeFilter<"Login"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Login"> | Date | string | null
  }

  export type LoginOrderByWithRelationInput = {
    CODUSER?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
  }

  export type LoginWhereUniqueInput = Prisma.AtLeast<{
    CODUSER?: number
    AND?: LoginWhereInput | LoginWhereInput[]
    OR?: LoginWhereInput[]
    NOT?: LoginWhereInput | LoginWhereInput[]
    USUARIO?: StringFilter<"Login"> | string
    SENHA?: StringFilter<"Login"> | string
    DATAINC?: DateTimeFilter<"Login"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Login"> | Date | string | null
  }, "CODUSER">

  export type LoginOrderByWithAggregationInput = {
    CODUSER?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: LoginCountOrderByAggregateInput
    _avg?: LoginAvgOrderByAggregateInput
    _max?: LoginMaxOrderByAggregateInput
    _min?: LoginMinOrderByAggregateInput
    _sum?: LoginSumOrderByAggregateInput
  }

  export type LoginScalarWhereWithAggregatesInput = {
    AND?: LoginScalarWhereWithAggregatesInput | LoginScalarWhereWithAggregatesInput[]
    OR?: LoginScalarWhereWithAggregatesInput[]
    NOT?: LoginScalarWhereWithAggregatesInput | LoginScalarWhereWithAggregatesInput[]
    CODUSER?: IntWithAggregatesFilter<"Login"> | number
    USUARIO?: StringWithAggregatesFilter<"Login"> | string
    SENHA?: StringWithAggregatesFilter<"Login"> | string
    DATAINC?: DateTimeWithAggregatesFilter<"Login"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Login"> | Date | string | null
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    CODPROD?: IntFilter<"Produto"> | number
    CODIGO?: StringNullableFilter<"Produto"> | string | null
    DESCRICAO?: StringNullableFilter<"Produto"> | string | null
    STATUS?: IntNullableFilter<"Produto"> | number | null
    CODCAT?: IntNullableFilter<"Produto"> | number | null
    DATAINC?: DateTimeFilter<"Produto"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Produto"> | Date | string | null
    ALUGUEIS?: AluguelListRelationFilter
    CATEGORIA?: XOR<CategoriaNullableRelationFilter, CategoriaWhereInput> | null
  }

  export type ProdutoOrderByWithRelationInput = {
    CODPROD?: SortOrder
    CODIGO?: SortOrderInput | SortOrder
    DESCRICAO?: SortOrderInput | SortOrder
    STATUS?: SortOrderInput | SortOrder
    CODCAT?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    ALUGUEIS?: AluguelOrderByRelationAggregateInput
    CATEGORIA?: CategoriaOrderByWithRelationInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    CODPROD?: number
    CODIGO?: string
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    DESCRICAO?: StringNullableFilter<"Produto"> | string | null
    STATUS?: IntNullableFilter<"Produto"> | number | null
    CODCAT?: IntNullableFilter<"Produto"> | number | null
    DATAINC?: DateTimeFilter<"Produto"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Produto"> | Date | string | null
    ALUGUEIS?: AluguelListRelationFilter
    CATEGORIA?: XOR<CategoriaNullableRelationFilter, CategoriaWhereInput> | null
  }, "CODPROD" | "CODIGO">

  export type ProdutoOrderByWithAggregationInput = {
    CODPROD?: SortOrder
    CODIGO?: SortOrderInput | SortOrder
    DESCRICAO?: SortOrderInput | SortOrder
    STATUS?: SortOrderInput | SortOrder
    CODCAT?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    CODPROD?: IntWithAggregatesFilter<"Produto"> | number
    CODIGO?: StringNullableWithAggregatesFilter<"Produto"> | string | null
    DESCRICAO?: StringNullableWithAggregatesFilter<"Produto"> | string | null
    STATUS?: IntNullableWithAggregatesFilter<"Produto"> | number | null
    CODCAT?: IntNullableWithAggregatesFilter<"Produto"> | number | null
    DATAINC?: DateTimeWithAggregatesFilter<"Produto"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Produto"> | Date | string | null
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    CODCAT?: IntFilter<"Categoria"> | number
    DESCRICAO?: StringFilter<"Categoria"> | string
    STATUS?: IntNullableFilter<"Categoria"> | number | null
    DATAINC?: DateTimeFilter<"Categoria"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Categoria"> | Date | string | null
    PRODUTOS?: ProdutoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    CODCAT?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    PRODUTOS?: ProdutoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    CODCAT?: number
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    DESCRICAO?: StringFilter<"Categoria"> | string
    STATUS?: IntNullableFilter<"Categoria"> | number | null
    DATAINC?: DateTimeFilter<"Categoria"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Categoria"> | Date | string | null
    PRODUTOS?: ProdutoListRelationFilter
  }, "CODCAT">

  export type CategoriaOrderByWithAggregationInput = {
    CODCAT?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    CODCAT?: IntWithAggregatesFilter<"Categoria"> | number
    DESCRICAO?: StringWithAggregatesFilter<"Categoria"> | string
    STATUS?: IntNullableWithAggregatesFilter<"Categoria"> | number | null
    DATAINC?: DateTimeWithAggregatesFilter<"Categoria"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Categoria"> | Date | string | null
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    CODCLI?: IntFilter<"Cliente"> | number
    NOME?: StringFilter<"Cliente"> | string
    CONTATO?: StringFilter<"Cliente"> | string
    DATAINC?: DateTimeFilter<"Cliente"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    ALUGUEIS?: AluguelListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    CODCLI?: SortOrder
    NOME?: SortOrder
    CONTATO?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    ALUGUEIS?: AluguelOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    CODCLI?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    NOME?: StringFilter<"Cliente"> | string
    CONTATO?: StringFilter<"Cliente"> | string
    DATAINC?: DateTimeFilter<"Cliente"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    ALUGUEIS?: AluguelListRelationFilter
  }, "CODCLI">

  export type ClienteOrderByWithAggregationInput = {
    CODCLI?: SortOrder
    NOME?: SortOrder
    CONTATO?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    CODCLI?: IntWithAggregatesFilter<"Cliente"> | number
    NOME?: StringWithAggregatesFilter<"Cliente"> | string
    CONTATO?: StringWithAggregatesFilter<"Cliente"> | string
    DATAINC?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Cliente"> | Date | string | null
  }

  export type AluguelWhereInput = {
    AND?: AluguelWhereInput | AluguelWhereInput[]
    OR?: AluguelWhereInput[]
    NOT?: AluguelWhereInput | AluguelWhereInput[]
    CODALU?: IntFilter<"Aluguel"> | number
    STATUS?: IntNullableFilter<"Aluguel"> | number | null
    DATAINICIO?: DateTimeFilter<"Aluguel"> | Date | string
    DATAFINAL?: DateTimeFilter<"Aluguel"> | Date | string
    ENDERECO?: StringFilter<"Aluguel"> | string
    PRECOINICIAL?: FloatFilter<"Aluguel"> | number
    CODCLI?: IntNullableFilter<"Aluguel"> | number | null
    CODPROD?: IntNullableFilter<"Aluguel"> | number | null
    DATAINC?: DateTimeFilter<"Aluguel"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Aluguel"> | Date | string | null
    CLIENTE?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    PRODUTO?: XOR<ProdutoNullableRelationFilter, ProdutoWhereInput> | null
    FATURADO?: XOR<FaturadoNullableRelationFilter, FaturadoWhereInput> | null
  }

  export type AluguelOrderByWithRelationInput = {
    CODALU?: SortOrder
    STATUS?: SortOrderInput | SortOrder
    DATAINICIO?: SortOrder
    DATAFINAL?: SortOrder
    ENDERECO?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrderInput | SortOrder
    CODPROD?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    CLIENTE?: ClienteOrderByWithRelationInput
    PRODUTO?: ProdutoOrderByWithRelationInput
    FATURADO?: FaturadoOrderByWithRelationInput
  }

  export type AluguelWhereUniqueInput = Prisma.AtLeast<{
    CODALU?: number
    AND?: AluguelWhereInput | AluguelWhereInput[]
    OR?: AluguelWhereInput[]
    NOT?: AluguelWhereInput | AluguelWhereInput[]
    STATUS?: IntNullableFilter<"Aluguel"> | number | null
    DATAINICIO?: DateTimeFilter<"Aluguel"> | Date | string
    DATAFINAL?: DateTimeFilter<"Aluguel"> | Date | string
    ENDERECO?: StringFilter<"Aluguel"> | string
    PRECOINICIAL?: FloatFilter<"Aluguel"> | number
    CODCLI?: IntNullableFilter<"Aluguel"> | number | null
    CODPROD?: IntNullableFilter<"Aluguel"> | number | null
    DATAINC?: DateTimeFilter<"Aluguel"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Aluguel"> | Date | string | null
    CLIENTE?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    PRODUTO?: XOR<ProdutoNullableRelationFilter, ProdutoWhereInput> | null
    FATURADO?: XOR<FaturadoNullableRelationFilter, FaturadoWhereInput> | null
  }, "CODALU">

  export type AluguelOrderByWithAggregationInput = {
    CODALU?: SortOrder
    STATUS?: SortOrderInput | SortOrder
    DATAINICIO?: SortOrder
    DATAFINAL?: SortOrder
    ENDERECO?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrderInput | SortOrder
    CODPROD?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: AluguelCountOrderByAggregateInput
    _avg?: AluguelAvgOrderByAggregateInput
    _max?: AluguelMaxOrderByAggregateInput
    _min?: AluguelMinOrderByAggregateInput
    _sum?: AluguelSumOrderByAggregateInput
  }

  export type AluguelScalarWhereWithAggregatesInput = {
    AND?: AluguelScalarWhereWithAggregatesInput | AluguelScalarWhereWithAggregatesInput[]
    OR?: AluguelScalarWhereWithAggregatesInput[]
    NOT?: AluguelScalarWhereWithAggregatesInput | AluguelScalarWhereWithAggregatesInput[]
    CODALU?: IntWithAggregatesFilter<"Aluguel"> | number
    STATUS?: IntNullableWithAggregatesFilter<"Aluguel"> | number | null
    DATAINICIO?: DateTimeWithAggregatesFilter<"Aluguel"> | Date | string
    DATAFINAL?: DateTimeWithAggregatesFilter<"Aluguel"> | Date | string
    ENDERECO?: StringWithAggregatesFilter<"Aluguel"> | string
    PRECOINICIAL?: FloatWithAggregatesFilter<"Aluguel"> | number
    CODCLI?: IntNullableWithAggregatesFilter<"Aluguel"> | number | null
    CODPROD?: IntNullableWithAggregatesFilter<"Aluguel"> | number | null
    DATAINC?: DateTimeWithAggregatesFilter<"Aluguel"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Aluguel"> | Date | string | null
  }

  export type FaturadoWhereInput = {
    AND?: FaturadoWhereInput | FaturadoWhereInput[]
    OR?: FaturadoWhereInput[]
    NOT?: FaturadoWhereInput | FaturadoWhereInput[]
    CODFAT?: IntFilter<"Faturado"> | number
    CUSTO?: FloatNullableFilter<"Faturado"> | number | null
    PRECOFINAL?: FloatFilter<"Faturado"> | number
    DATAFATURADO?: DateTimeFilter<"Faturado"> | Date | string
    CODALU?: IntNullableFilter<"Faturado"> | number | null
    DATAINC?: DateTimeFilter<"Faturado"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Faturado"> | Date | string | null
    ALUGUEL?: XOR<AluguelNullableRelationFilter, AluguelWhereInput> | null
  }

  export type FaturadoOrderByWithRelationInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrderInput | SortOrder
    PRECOFINAL?: SortOrder
    DATAFATURADO?: SortOrder
    CODALU?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    ALUGUEL?: AluguelOrderByWithRelationInput
  }

  export type FaturadoWhereUniqueInput = Prisma.AtLeast<{
    CODFAT?: number
    CODALU?: number
    AND?: FaturadoWhereInput | FaturadoWhereInput[]
    OR?: FaturadoWhereInput[]
    NOT?: FaturadoWhereInput | FaturadoWhereInput[]
    CUSTO?: FloatNullableFilter<"Faturado"> | number | null
    PRECOFINAL?: FloatFilter<"Faturado"> | number
    DATAFATURADO?: DateTimeFilter<"Faturado"> | Date | string
    DATAINC?: DateTimeFilter<"Faturado"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Faturado"> | Date | string | null
    ALUGUEL?: XOR<AluguelNullableRelationFilter, AluguelWhereInput> | null
  }, "CODFAT" | "CODALU">

  export type FaturadoOrderByWithAggregationInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrderInput | SortOrder
    PRECOFINAL?: SortOrder
    DATAFATURADO?: SortOrder
    CODALU?: SortOrderInput | SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrderInput | SortOrder
    _count?: FaturadoCountOrderByAggregateInput
    _avg?: FaturadoAvgOrderByAggregateInput
    _max?: FaturadoMaxOrderByAggregateInput
    _min?: FaturadoMinOrderByAggregateInput
    _sum?: FaturadoSumOrderByAggregateInput
  }

  export type FaturadoScalarWhereWithAggregatesInput = {
    AND?: FaturadoScalarWhereWithAggregatesInput | FaturadoScalarWhereWithAggregatesInput[]
    OR?: FaturadoScalarWhereWithAggregatesInput[]
    NOT?: FaturadoScalarWhereWithAggregatesInput | FaturadoScalarWhereWithAggregatesInput[]
    CODFAT?: IntWithAggregatesFilter<"Faturado"> | number
    CUSTO?: FloatNullableWithAggregatesFilter<"Faturado"> | number | null
    PRECOFINAL?: FloatWithAggregatesFilter<"Faturado"> | number
    DATAFATURADO?: DateTimeWithAggregatesFilter<"Faturado"> | Date | string
    CODALU?: IntNullableWithAggregatesFilter<"Faturado"> | number | null
    DATAINC?: DateTimeWithAggregatesFilter<"Faturado"> | Date | string
    DATAALT?: DateTimeNullableWithAggregatesFilter<"Faturado"> | Date | string | null
  }

  export type LoginCreateInput = {
    USUARIO: string
    SENHA: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type LoginUncheckedCreateInput = {
    CODUSER?: number
    USUARIO: string
    SENHA: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type LoginUpdateInput = {
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoginUncheckedUpdateInput = {
    CODUSER?: IntFieldUpdateOperationsInput | number
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoginCreateManyInput = {
    CODUSER?: number
    USUARIO: string
    SENHA: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type LoginUpdateManyMutationInput = {
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoginUncheckedUpdateManyInput = {
    CODUSER?: IntFieldUpdateOperationsInput | number
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoCreateInput = {
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelCreateNestedManyWithoutPRODUTOInput
    CATEGORIA?: CategoriaCreateNestedOneWithoutPRODUTOSInput
  }

  export type ProdutoUncheckedCreateInput = {
    CODPROD?: number
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    CODCAT?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelUncheckedCreateNestedManyWithoutPRODUTOInput
  }

  export type ProdutoUpdateInput = {
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUpdateManyWithoutPRODUTONestedInput
    CATEGORIA?: CategoriaUpdateOneWithoutPRODUTOSNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    CODPROD?: IntFieldUpdateOperationsInput | number
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    CODCAT?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUncheckedUpdateManyWithoutPRODUTONestedInput
  }

  export type ProdutoCreateManyInput = {
    CODPROD?: number
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    CODCAT?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ProdutoUpdateManyMutationInput = {
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoUncheckedUpdateManyInput = {
    CODPROD?: IntFieldUpdateOperationsInput | number
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    CODCAT?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoriaCreateInput = {
    DESCRICAO: string
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    PRODUTOS?: ProdutoCreateNestedManyWithoutCATEGORIAInput
  }

  export type CategoriaUncheckedCreateInput = {
    CODCAT?: number
    DESCRICAO: string
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    PRODUTOS?: ProdutoUncheckedCreateNestedManyWithoutCATEGORIAInput
  }

  export type CategoriaUpdateInput = {
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    PRODUTOS?: ProdutoUpdateManyWithoutCATEGORIANestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    CODCAT?: IntFieldUpdateOperationsInput | number
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    PRODUTOS?: ProdutoUncheckedUpdateManyWithoutCATEGORIANestedInput
  }

  export type CategoriaCreateManyInput = {
    CODCAT?: number
    DESCRICAO: string
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type CategoriaUpdateManyMutationInput = {
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoriaUncheckedUpdateManyInput = {
    CODCAT?: IntFieldUpdateOperationsInput | number
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClienteCreateInput = {
    NOME: string
    CONTATO: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelCreateNestedManyWithoutCLIENTEInput
  }

  export type ClienteUncheckedCreateInput = {
    CODCLI?: number
    NOME: string
    CONTATO: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelUncheckedCreateNestedManyWithoutCLIENTEInput
  }

  export type ClienteUpdateInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUpdateManyWithoutCLIENTENestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    CODCLI?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUncheckedUpdateManyWithoutCLIENTENestedInput
  }

  export type ClienteCreateManyInput = {
    CODCLI?: number
    NOME: string
    CONTATO: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ClienteUpdateManyMutationInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    CODCLI?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AluguelCreateInput = {
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    CLIENTE?: ClienteCreateNestedOneWithoutALUGUEISInput
    PRODUTO?: ProdutoCreateNestedOneWithoutALUGUEISInput
    FATURADO?: FaturadoCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelUncheckedCreateInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI?: number | null
    CODPROD?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    FATURADO?: FaturadoUncheckedCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelUpdateInput = {
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CLIENTE?: ClienteUpdateOneWithoutALUGUEISNestedInput
    PRODUTO?: ProdutoUpdateOneWithoutALUGUEISNestedInput
    FATURADO?: FaturadoUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelUncheckedUpdateInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODCLI?: NullableIntFieldUpdateOperationsInput | number | null
    CODPROD?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FATURADO?: FaturadoUncheckedUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelCreateManyInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI?: number | null
    CODPROD?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type AluguelUpdateManyMutationInput = {
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AluguelUncheckedUpdateManyInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODCLI?: NullableIntFieldUpdateOperationsInput | number | null
    CODPROD?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FaturadoCreateInput = {
    CUSTO?: number | null
    PRECOFINAL: number
    DATAFATURADO: Date | string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEL?: AluguelCreateNestedOneWithoutFATURADOInput
  }

  export type FaturadoUncheckedCreateInput = {
    CODFAT?: number
    CUSTO?: number | null
    PRECOFINAL: number
    DATAFATURADO: Date | string
    CODALU?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type FaturadoUpdateInput = {
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEL?: AluguelUpdateOneWithoutFATURADONestedInput
  }

  export type FaturadoUncheckedUpdateInput = {
    CODFAT?: IntFieldUpdateOperationsInput | number
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    CODALU?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FaturadoCreateManyInput = {
    CODFAT?: number
    CUSTO?: number | null
    PRECOFINAL: number
    DATAFATURADO: Date | string
    CODALU?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type FaturadoUpdateManyMutationInput = {
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FaturadoUncheckedUpdateManyInput = {
    CODFAT?: IntFieldUpdateOperationsInput | number
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    CODALU?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LoginCountOrderByAggregateInput = {
    CODUSER?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type LoginAvgOrderByAggregateInput = {
    CODUSER?: SortOrder
  }

  export type LoginMaxOrderByAggregateInput = {
    CODUSER?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type LoginMinOrderByAggregateInput = {
    CODUSER?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type LoginSumOrderByAggregateInput = {
    CODUSER?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AluguelListRelationFilter = {
    every?: AluguelWhereInput
    some?: AluguelWhereInput
    none?: AluguelWhereInput
  }

  export type CategoriaNullableRelationFilter = {
    is?: CategoriaWhereInput | null
    isNot?: CategoriaWhereInput | null
  }

  export type AluguelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoCountOrderByAggregateInput = {
    CODPROD?: SortOrder
    CODIGO?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    CODCAT?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    CODPROD?: SortOrder
    STATUS?: SortOrder
    CODCAT?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    CODPROD?: SortOrder
    CODIGO?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    CODCAT?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    CODPROD?: SortOrder
    CODIGO?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    CODCAT?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    CODPROD?: SortOrder
    STATUS?: SortOrder
    CODCAT?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaCountOrderByAggregateInput = {
    CODCAT?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    CODCAT?: SortOrder
    STATUS?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    CODCAT?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    CODCAT?: SortOrder
    DESCRICAO?: SortOrder
    STATUS?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    CODCAT?: SortOrder
    STATUS?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    CODCLI?: SortOrder
    NOME?: SortOrder
    CONTATO?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    CODCLI?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    CODCLI?: SortOrder
    NOME?: SortOrder
    CONTATO?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    CODCLI?: SortOrder
    NOME?: SortOrder
    CONTATO?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    CODCLI?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ClienteNullableRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type ProdutoNullableRelationFilter = {
    is?: ProdutoWhereInput | null
    isNot?: ProdutoWhereInput | null
  }

  export type FaturadoNullableRelationFilter = {
    is?: FaturadoWhereInput | null
    isNot?: FaturadoWhereInput | null
  }

  export type AluguelCountOrderByAggregateInput = {
    CODALU?: SortOrder
    STATUS?: SortOrder
    DATAINICIO?: SortOrder
    DATAFINAL?: SortOrder
    ENDERECO?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrder
    CODPROD?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type AluguelAvgOrderByAggregateInput = {
    CODALU?: SortOrder
    STATUS?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrder
    CODPROD?: SortOrder
  }

  export type AluguelMaxOrderByAggregateInput = {
    CODALU?: SortOrder
    STATUS?: SortOrder
    DATAINICIO?: SortOrder
    DATAFINAL?: SortOrder
    ENDERECO?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrder
    CODPROD?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type AluguelMinOrderByAggregateInput = {
    CODALU?: SortOrder
    STATUS?: SortOrder
    DATAINICIO?: SortOrder
    DATAFINAL?: SortOrder
    ENDERECO?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrder
    CODPROD?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type AluguelSumOrderByAggregateInput = {
    CODALU?: SortOrder
    STATUS?: SortOrder
    PRECOINICIAL?: SortOrder
    CODCLI?: SortOrder
    CODPROD?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AluguelNullableRelationFilter = {
    is?: AluguelWhereInput | null
    isNot?: AluguelWhereInput | null
  }

  export type FaturadoCountOrderByAggregateInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrder
    PRECOFINAL?: SortOrder
    DATAFATURADO?: SortOrder
    CODALU?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type FaturadoAvgOrderByAggregateInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrder
    PRECOFINAL?: SortOrder
    CODALU?: SortOrder
  }

  export type FaturadoMaxOrderByAggregateInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrder
    PRECOFINAL?: SortOrder
    DATAFATURADO?: SortOrder
    CODALU?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type FaturadoMinOrderByAggregateInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrder
    PRECOFINAL?: SortOrder
    DATAFATURADO?: SortOrder
    CODALU?: SortOrder
    DATAINC?: SortOrder
    DATAALT?: SortOrder
  }

  export type FaturadoSumOrderByAggregateInput = {
    CODFAT?: SortOrder
    CUSTO?: SortOrder
    PRECOFINAL?: SortOrder
    CODALU?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AluguelCreateNestedManyWithoutPRODUTOInput = {
    create?: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput> | AluguelCreateWithoutPRODUTOInput[] | AluguelUncheckedCreateWithoutPRODUTOInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutPRODUTOInput | AluguelCreateOrConnectWithoutPRODUTOInput[]
    createMany?: AluguelCreateManyPRODUTOInputEnvelope
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
  }

  export type CategoriaCreateNestedOneWithoutPRODUTOSInput = {
    create?: XOR<CategoriaCreateWithoutPRODUTOSInput, CategoriaUncheckedCreateWithoutPRODUTOSInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutPRODUTOSInput
    connect?: CategoriaWhereUniqueInput
  }

  export type AluguelUncheckedCreateNestedManyWithoutPRODUTOInput = {
    create?: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput> | AluguelCreateWithoutPRODUTOInput[] | AluguelUncheckedCreateWithoutPRODUTOInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutPRODUTOInput | AluguelCreateOrConnectWithoutPRODUTOInput[]
    createMany?: AluguelCreateManyPRODUTOInputEnvelope
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AluguelUpdateManyWithoutPRODUTONestedInput = {
    create?: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput> | AluguelCreateWithoutPRODUTOInput[] | AluguelUncheckedCreateWithoutPRODUTOInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutPRODUTOInput | AluguelCreateOrConnectWithoutPRODUTOInput[]
    upsert?: AluguelUpsertWithWhereUniqueWithoutPRODUTOInput | AluguelUpsertWithWhereUniqueWithoutPRODUTOInput[]
    createMany?: AluguelCreateManyPRODUTOInputEnvelope
    set?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    disconnect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    delete?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    update?: AluguelUpdateWithWhereUniqueWithoutPRODUTOInput | AluguelUpdateWithWhereUniqueWithoutPRODUTOInput[]
    updateMany?: AluguelUpdateManyWithWhereWithoutPRODUTOInput | AluguelUpdateManyWithWhereWithoutPRODUTOInput[]
    deleteMany?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
  }

  export type CategoriaUpdateOneWithoutPRODUTOSNestedInput = {
    create?: XOR<CategoriaCreateWithoutPRODUTOSInput, CategoriaUncheckedCreateWithoutPRODUTOSInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutPRODUTOSInput
    upsert?: CategoriaUpsertWithoutPRODUTOSInput
    disconnect?: CategoriaWhereInput | boolean
    delete?: CategoriaWhereInput | boolean
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutPRODUTOSInput, CategoriaUpdateWithoutPRODUTOSInput>, CategoriaUncheckedUpdateWithoutPRODUTOSInput>
  }

  export type AluguelUncheckedUpdateManyWithoutPRODUTONestedInput = {
    create?: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput> | AluguelCreateWithoutPRODUTOInput[] | AluguelUncheckedCreateWithoutPRODUTOInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutPRODUTOInput | AluguelCreateOrConnectWithoutPRODUTOInput[]
    upsert?: AluguelUpsertWithWhereUniqueWithoutPRODUTOInput | AluguelUpsertWithWhereUniqueWithoutPRODUTOInput[]
    createMany?: AluguelCreateManyPRODUTOInputEnvelope
    set?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    disconnect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    delete?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    update?: AluguelUpdateWithWhereUniqueWithoutPRODUTOInput | AluguelUpdateWithWhereUniqueWithoutPRODUTOInput[]
    updateMany?: AluguelUpdateManyWithWhereWithoutPRODUTOInput | AluguelUpdateManyWithWhereWithoutPRODUTOInput[]
    deleteMany?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
  }

  export type ProdutoCreateNestedManyWithoutCATEGORIAInput = {
    create?: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput> | ProdutoCreateWithoutCATEGORIAInput[] | ProdutoUncheckedCreateWithoutCATEGORIAInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCATEGORIAInput | ProdutoCreateOrConnectWithoutCATEGORIAInput[]
    createMany?: ProdutoCreateManyCATEGORIAInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ProdutoUncheckedCreateNestedManyWithoutCATEGORIAInput = {
    create?: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput> | ProdutoCreateWithoutCATEGORIAInput[] | ProdutoUncheckedCreateWithoutCATEGORIAInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCATEGORIAInput | ProdutoCreateOrConnectWithoutCATEGORIAInput[]
    createMany?: ProdutoCreateManyCATEGORIAInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ProdutoUpdateManyWithoutCATEGORIANestedInput = {
    create?: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput> | ProdutoCreateWithoutCATEGORIAInput[] | ProdutoUncheckedCreateWithoutCATEGORIAInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCATEGORIAInput | ProdutoCreateOrConnectWithoutCATEGORIAInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutCATEGORIAInput | ProdutoUpsertWithWhereUniqueWithoutCATEGORIAInput[]
    createMany?: ProdutoCreateManyCATEGORIAInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutCATEGORIAInput | ProdutoUpdateWithWhereUniqueWithoutCATEGORIAInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutCATEGORIAInput | ProdutoUpdateManyWithWhereWithoutCATEGORIAInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type ProdutoUncheckedUpdateManyWithoutCATEGORIANestedInput = {
    create?: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput> | ProdutoCreateWithoutCATEGORIAInput[] | ProdutoUncheckedCreateWithoutCATEGORIAInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCATEGORIAInput | ProdutoCreateOrConnectWithoutCATEGORIAInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutCATEGORIAInput | ProdutoUpsertWithWhereUniqueWithoutCATEGORIAInput[]
    createMany?: ProdutoCreateManyCATEGORIAInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutCATEGORIAInput | ProdutoUpdateWithWhereUniqueWithoutCATEGORIAInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutCATEGORIAInput | ProdutoUpdateManyWithWhereWithoutCATEGORIAInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type AluguelCreateNestedManyWithoutCLIENTEInput = {
    create?: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput> | AluguelCreateWithoutCLIENTEInput[] | AluguelUncheckedCreateWithoutCLIENTEInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutCLIENTEInput | AluguelCreateOrConnectWithoutCLIENTEInput[]
    createMany?: AluguelCreateManyCLIENTEInputEnvelope
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
  }

  export type AluguelUncheckedCreateNestedManyWithoutCLIENTEInput = {
    create?: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput> | AluguelCreateWithoutCLIENTEInput[] | AluguelUncheckedCreateWithoutCLIENTEInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutCLIENTEInput | AluguelCreateOrConnectWithoutCLIENTEInput[]
    createMany?: AluguelCreateManyCLIENTEInputEnvelope
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
  }

  export type AluguelUpdateManyWithoutCLIENTENestedInput = {
    create?: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput> | AluguelCreateWithoutCLIENTEInput[] | AluguelUncheckedCreateWithoutCLIENTEInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutCLIENTEInput | AluguelCreateOrConnectWithoutCLIENTEInput[]
    upsert?: AluguelUpsertWithWhereUniqueWithoutCLIENTEInput | AluguelUpsertWithWhereUniqueWithoutCLIENTEInput[]
    createMany?: AluguelCreateManyCLIENTEInputEnvelope
    set?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    disconnect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    delete?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    update?: AluguelUpdateWithWhereUniqueWithoutCLIENTEInput | AluguelUpdateWithWhereUniqueWithoutCLIENTEInput[]
    updateMany?: AluguelUpdateManyWithWhereWithoutCLIENTEInput | AluguelUpdateManyWithWhereWithoutCLIENTEInput[]
    deleteMany?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
  }

  export type AluguelUncheckedUpdateManyWithoutCLIENTENestedInput = {
    create?: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput> | AluguelCreateWithoutCLIENTEInput[] | AluguelUncheckedCreateWithoutCLIENTEInput[]
    connectOrCreate?: AluguelCreateOrConnectWithoutCLIENTEInput | AluguelCreateOrConnectWithoutCLIENTEInput[]
    upsert?: AluguelUpsertWithWhereUniqueWithoutCLIENTEInput | AluguelUpsertWithWhereUniqueWithoutCLIENTEInput[]
    createMany?: AluguelCreateManyCLIENTEInputEnvelope
    set?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    disconnect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    delete?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    connect?: AluguelWhereUniqueInput | AluguelWhereUniqueInput[]
    update?: AluguelUpdateWithWhereUniqueWithoutCLIENTEInput | AluguelUpdateWithWhereUniqueWithoutCLIENTEInput[]
    updateMany?: AluguelUpdateManyWithWhereWithoutCLIENTEInput | AluguelUpdateManyWithWhereWithoutCLIENTEInput[]
    deleteMany?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutALUGUEISInput = {
    create?: XOR<ClienteCreateWithoutALUGUEISInput, ClienteUncheckedCreateWithoutALUGUEISInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutALUGUEISInput
    connect?: ClienteWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutALUGUEISInput = {
    create?: XOR<ProdutoCreateWithoutALUGUEISInput, ProdutoUncheckedCreateWithoutALUGUEISInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutALUGUEISInput
    connect?: ProdutoWhereUniqueInput
  }

  export type FaturadoCreateNestedOneWithoutALUGUELInput = {
    create?: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
    connectOrCreate?: FaturadoCreateOrConnectWithoutALUGUELInput
    connect?: FaturadoWhereUniqueInput
  }

  export type FaturadoUncheckedCreateNestedOneWithoutALUGUELInput = {
    create?: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
    connectOrCreate?: FaturadoCreateOrConnectWithoutALUGUELInput
    connect?: FaturadoWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUpdateOneWithoutALUGUEISNestedInput = {
    create?: XOR<ClienteCreateWithoutALUGUEISInput, ClienteUncheckedCreateWithoutALUGUEISInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutALUGUEISInput
    upsert?: ClienteUpsertWithoutALUGUEISInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutALUGUEISInput, ClienteUpdateWithoutALUGUEISInput>, ClienteUncheckedUpdateWithoutALUGUEISInput>
  }

  export type ProdutoUpdateOneWithoutALUGUEISNestedInput = {
    create?: XOR<ProdutoCreateWithoutALUGUEISInput, ProdutoUncheckedCreateWithoutALUGUEISInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutALUGUEISInput
    upsert?: ProdutoUpsertWithoutALUGUEISInput
    disconnect?: ProdutoWhereInput | boolean
    delete?: ProdutoWhereInput | boolean
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutALUGUEISInput, ProdutoUpdateWithoutALUGUEISInput>, ProdutoUncheckedUpdateWithoutALUGUEISInput>
  }

  export type FaturadoUpdateOneWithoutALUGUELNestedInput = {
    create?: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
    connectOrCreate?: FaturadoCreateOrConnectWithoutALUGUELInput
    upsert?: FaturadoUpsertWithoutALUGUELInput
    disconnect?: FaturadoWhereInput | boolean
    delete?: FaturadoWhereInput | boolean
    connect?: FaturadoWhereUniqueInput
    update?: XOR<XOR<FaturadoUpdateToOneWithWhereWithoutALUGUELInput, FaturadoUpdateWithoutALUGUELInput>, FaturadoUncheckedUpdateWithoutALUGUELInput>
  }

  export type FaturadoUncheckedUpdateOneWithoutALUGUELNestedInput = {
    create?: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
    connectOrCreate?: FaturadoCreateOrConnectWithoutALUGUELInput
    upsert?: FaturadoUpsertWithoutALUGUELInput
    disconnect?: FaturadoWhereInput | boolean
    delete?: FaturadoWhereInput | boolean
    connect?: FaturadoWhereUniqueInput
    update?: XOR<XOR<FaturadoUpdateToOneWithWhereWithoutALUGUELInput, FaturadoUpdateWithoutALUGUELInput>, FaturadoUncheckedUpdateWithoutALUGUELInput>
  }

  export type AluguelCreateNestedOneWithoutFATURADOInput = {
    create?: XOR<AluguelCreateWithoutFATURADOInput, AluguelUncheckedCreateWithoutFATURADOInput>
    connectOrCreate?: AluguelCreateOrConnectWithoutFATURADOInput
    connect?: AluguelWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AluguelUpdateOneWithoutFATURADONestedInput = {
    create?: XOR<AluguelCreateWithoutFATURADOInput, AluguelUncheckedCreateWithoutFATURADOInput>
    connectOrCreate?: AluguelCreateOrConnectWithoutFATURADOInput
    upsert?: AluguelUpsertWithoutFATURADOInput
    disconnect?: AluguelWhereInput | boolean
    delete?: AluguelWhereInput | boolean
    connect?: AluguelWhereUniqueInput
    update?: XOR<XOR<AluguelUpdateToOneWithWhereWithoutFATURADOInput, AluguelUpdateWithoutFATURADOInput>, AluguelUncheckedUpdateWithoutFATURADOInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type AluguelCreateWithoutPRODUTOInput = {
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    CLIENTE?: ClienteCreateNestedOneWithoutALUGUEISInput
    FATURADO?: FaturadoCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelUncheckedCreateWithoutPRODUTOInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    FATURADO?: FaturadoUncheckedCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelCreateOrConnectWithoutPRODUTOInput = {
    where: AluguelWhereUniqueInput
    create: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput>
  }

  export type AluguelCreateManyPRODUTOInputEnvelope = {
    data: AluguelCreateManyPRODUTOInput | AluguelCreateManyPRODUTOInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaCreateWithoutPRODUTOSInput = {
    DESCRICAO: string
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type CategoriaUncheckedCreateWithoutPRODUTOSInput = {
    CODCAT?: number
    DESCRICAO: string
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type CategoriaCreateOrConnectWithoutPRODUTOSInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutPRODUTOSInput, CategoriaUncheckedCreateWithoutPRODUTOSInput>
  }

  export type AluguelUpsertWithWhereUniqueWithoutPRODUTOInput = {
    where: AluguelWhereUniqueInput
    update: XOR<AluguelUpdateWithoutPRODUTOInput, AluguelUncheckedUpdateWithoutPRODUTOInput>
    create: XOR<AluguelCreateWithoutPRODUTOInput, AluguelUncheckedCreateWithoutPRODUTOInput>
  }

  export type AluguelUpdateWithWhereUniqueWithoutPRODUTOInput = {
    where: AluguelWhereUniqueInput
    data: XOR<AluguelUpdateWithoutPRODUTOInput, AluguelUncheckedUpdateWithoutPRODUTOInput>
  }

  export type AluguelUpdateManyWithWhereWithoutPRODUTOInput = {
    where: AluguelScalarWhereInput
    data: XOR<AluguelUpdateManyMutationInput, AluguelUncheckedUpdateManyWithoutPRODUTOInput>
  }

  export type AluguelScalarWhereInput = {
    AND?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
    OR?: AluguelScalarWhereInput[]
    NOT?: AluguelScalarWhereInput | AluguelScalarWhereInput[]
    CODALU?: IntFilter<"Aluguel"> | number
    STATUS?: IntNullableFilter<"Aluguel"> | number | null
    DATAINICIO?: DateTimeFilter<"Aluguel"> | Date | string
    DATAFINAL?: DateTimeFilter<"Aluguel"> | Date | string
    ENDERECO?: StringFilter<"Aluguel"> | string
    PRECOINICIAL?: FloatFilter<"Aluguel"> | number
    CODCLI?: IntNullableFilter<"Aluguel"> | number | null
    CODPROD?: IntNullableFilter<"Aluguel"> | number | null
    DATAINC?: DateTimeFilter<"Aluguel"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Aluguel"> | Date | string | null
  }

  export type CategoriaUpsertWithoutPRODUTOSInput = {
    update: XOR<CategoriaUpdateWithoutPRODUTOSInput, CategoriaUncheckedUpdateWithoutPRODUTOSInput>
    create: XOR<CategoriaCreateWithoutPRODUTOSInput, CategoriaUncheckedCreateWithoutPRODUTOSInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutPRODUTOSInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutPRODUTOSInput, CategoriaUncheckedUpdateWithoutPRODUTOSInput>
  }

  export type CategoriaUpdateWithoutPRODUTOSInput = {
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoriaUncheckedUpdateWithoutPRODUTOSInput = {
    CODCAT?: IntFieldUpdateOperationsInput | number
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoCreateWithoutCATEGORIAInput = {
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelCreateNestedManyWithoutPRODUTOInput
  }

  export type ProdutoUncheckedCreateWithoutCATEGORIAInput = {
    CODPROD?: number
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    ALUGUEIS?: AluguelUncheckedCreateNestedManyWithoutPRODUTOInput
  }

  export type ProdutoCreateOrConnectWithoutCATEGORIAInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput>
  }

  export type ProdutoCreateManyCATEGORIAInputEnvelope = {
    data: ProdutoCreateManyCATEGORIAInput | ProdutoCreateManyCATEGORIAInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutCATEGORIAInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutCATEGORIAInput, ProdutoUncheckedUpdateWithoutCATEGORIAInput>
    create: XOR<ProdutoCreateWithoutCATEGORIAInput, ProdutoUncheckedCreateWithoutCATEGORIAInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutCATEGORIAInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutCATEGORIAInput, ProdutoUncheckedUpdateWithoutCATEGORIAInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutCATEGORIAInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutCATEGORIAInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    OR?: ProdutoScalarWhereInput[]
    NOT?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    CODPROD?: IntFilter<"Produto"> | number
    CODIGO?: StringNullableFilter<"Produto"> | string | null
    DESCRICAO?: StringNullableFilter<"Produto"> | string | null
    STATUS?: IntNullableFilter<"Produto"> | number | null
    CODCAT?: IntNullableFilter<"Produto"> | number | null
    DATAINC?: DateTimeFilter<"Produto"> | Date | string
    DATAALT?: DateTimeNullableFilter<"Produto"> | Date | string | null
  }

  export type AluguelCreateWithoutCLIENTEInput = {
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    PRODUTO?: ProdutoCreateNestedOneWithoutALUGUEISInput
    FATURADO?: FaturadoCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelUncheckedCreateWithoutCLIENTEInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODPROD?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    FATURADO?: FaturadoUncheckedCreateNestedOneWithoutALUGUELInput
  }

  export type AluguelCreateOrConnectWithoutCLIENTEInput = {
    where: AluguelWhereUniqueInput
    create: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput>
  }

  export type AluguelCreateManyCLIENTEInputEnvelope = {
    data: AluguelCreateManyCLIENTEInput | AluguelCreateManyCLIENTEInput[]
    skipDuplicates?: boolean
  }

  export type AluguelUpsertWithWhereUniqueWithoutCLIENTEInput = {
    where: AluguelWhereUniqueInput
    update: XOR<AluguelUpdateWithoutCLIENTEInput, AluguelUncheckedUpdateWithoutCLIENTEInput>
    create: XOR<AluguelCreateWithoutCLIENTEInput, AluguelUncheckedCreateWithoutCLIENTEInput>
  }

  export type AluguelUpdateWithWhereUniqueWithoutCLIENTEInput = {
    where: AluguelWhereUniqueInput
    data: XOR<AluguelUpdateWithoutCLIENTEInput, AluguelUncheckedUpdateWithoutCLIENTEInput>
  }

  export type AluguelUpdateManyWithWhereWithoutCLIENTEInput = {
    where: AluguelScalarWhereInput
    data: XOR<AluguelUpdateManyMutationInput, AluguelUncheckedUpdateManyWithoutCLIENTEInput>
  }

  export type ClienteCreateWithoutALUGUEISInput = {
    NOME: string
    CONTATO: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ClienteUncheckedCreateWithoutALUGUEISInput = {
    CODCLI?: number
    NOME: string
    CONTATO: string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ClienteCreateOrConnectWithoutALUGUEISInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutALUGUEISInput, ClienteUncheckedCreateWithoutALUGUEISInput>
  }

  export type ProdutoCreateWithoutALUGUEISInput = {
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    CATEGORIA?: CategoriaCreateNestedOneWithoutPRODUTOSInput
  }

  export type ProdutoUncheckedCreateWithoutALUGUEISInput = {
    CODPROD?: number
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    CODCAT?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ProdutoCreateOrConnectWithoutALUGUEISInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutALUGUEISInput, ProdutoUncheckedCreateWithoutALUGUEISInput>
  }

  export type FaturadoCreateWithoutALUGUELInput = {
    CUSTO?: number | null
    PRECOFINAL: number
    DATAFATURADO: Date | string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type FaturadoUncheckedCreateWithoutALUGUELInput = {
    CODFAT?: number
    CUSTO?: number | null
    PRECOFINAL: number
    DATAFATURADO: Date | string
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type FaturadoCreateOrConnectWithoutALUGUELInput = {
    where: FaturadoWhereUniqueInput
    create: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
  }

  export type ClienteUpsertWithoutALUGUEISInput = {
    update: XOR<ClienteUpdateWithoutALUGUEISInput, ClienteUncheckedUpdateWithoutALUGUEISInput>
    create: XOR<ClienteCreateWithoutALUGUEISInput, ClienteUncheckedCreateWithoutALUGUEISInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutALUGUEISInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutALUGUEISInput, ClienteUncheckedUpdateWithoutALUGUEISInput>
  }

  export type ClienteUpdateWithoutALUGUEISInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClienteUncheckedUpdateWithoutALUGUEISInput = {
    CODCLI?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    CONTATO?: StringFieldUpdateOperationsInput | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoUpsertWithoutALUGUEISInput = {
    update: XOR<ProdutoUpdateWithoutALUGUEISInput, ProdutoUncheckedUpdateWithoutALUGUEISInput>
    create: XOR<ProdutoCreateWithoutALUGUEISInput, ProdutoUncheckedCreateWithoutALUGUEISInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutALUGUEISInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutALUGUEISInput, ProdutoUncheckedUpdateWithoutALUGUEISInput>
  }

  export type ProdutoUpdateWithoutALUGUEISInput = {
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CATEGORIA?: CategoriaUpdateOneWithoutPRODUTOSNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutALUGUEISInput = {
    CODPROD?: IntFieldUpdateOperationsInput | number
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    CODCAT?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FaturadoUpsertWithoutALUGUELInput = {
    update: XOR<FaturadoUpdateWithoutALUGUELInput, FaturadoUncheckedUpdateWithoutALUGUELInput>
    create: XOR<FaturadoCreateWithoutALUGUELInput, FaturadoUncheckedCreateWithoutALUGUELInput>
    where?: FaturadoWhereInput
  }

  export type FaturadoUpdateToOneWithWhereWithoutALUGUELInput = {
    where?: FaturadoWhereInput
    data: XOR<FaturadoUpdateWithoutALUGUELInput, FaturadoUncheckedUpdateWithoutALUGUELInput>
  }

  export type FaturadoUpdateWithoutALUGUELInput = {
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FaturadoUncheckedUpdateWithoutALUGUELInput = {
    CODFAT?: IntFieldUpdateOperationsInput | number
    CUSTO?: NullableFloatFieldUpdateOperationsInput | number | null
    PRECOFINAL?: FloatFieldUpdateOperationsInput | number
    DATAFATURADO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AluguelCreateWithoutFATURADOInput = {
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    DATAINC?: Date | string
    DATAALT?: Date | string | null
    CLIENTE?: ClienteCreateNestedOneWithoutALUGUEISInput
    PRODUTO?: ProdutoCreateNestedOneWithoutALUGUEISInput
  }

  export type AluguelUncheckedCreateWithoutFATURADOInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI?: number | null
    CODPROD?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type AluguelCreateOrConnectWithoutFATURADOInput = {
    where: AluguelWhereUniqueInput
    create: XOR<AluguelCreateWithoutFATURADOInput, AluguelUncheckedCreateWithoutFATURADOInput>
  }

  export type AluguelUpsertWithoutFATURADOInput = {
    update: XOR<AluguelUpdateWithoutFATURADOInput, AluguelUncheckedUpdateWithoutFATURADOInput>
    create: XOR<AluguelCreateWithoutFATURADOInput, AluguelUncheckedCreateWithoutFATURADOInput>
    where?: AluguelWhereInput
  }

  export type AluguelUpdateToOneWithWhereWithoutFATURADOInput = {
    where?: AluguelWhereInput
    data: XOR<AluguelUpdateWithoutFATURADOInput, AluguelUncheckedUpdateWithoutFATURADOInput>
  }

  export type AluguelUpdateWithoutFATURADOInput = {
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CLIENTE?: ClienteUpdateOneWithoutALUGUEISNestedInput
    PRODUTO?: ProdutoUpdateOneWithoutALUGUEISNestedInput
  }

  export type AluguelUncheckedUpdateWithoutFATURADOInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODCLI?: NullableIntFieldUpdateOperationsInput | number | null
    CODPROD?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AluguelCreateManyPRODUTOInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODCLI?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type AluguelUpdateWithoutPRODUTOInput = {
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CLIENTE?: ClienteUpdateOneWithoutALUGUEISNestedInput
    FATURADO?: FaturadoUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelUncheckedUpdateWithoutPRODUTOInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODCLI?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FATURADO?: FaturadoUncheckedUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelUncheckedUpdateManyWithoutPRODUTOInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODCLI?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdutoCreateManyCATEGORIAInput = {
    CODPROD?: number
    CODIGO?: string | null
    DESCRICAO?: string | null
    STATUS?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type ProdutoUpdateWithoutCATEGORIAInput = {
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUpdateManyWithoutPRODUTONestedInput
  }

  export type ProdutoUncheckedUpdateWithoutCATEGORIAInput = {
    CODPROD?: IntFieldUpdateOperationsInput | number
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ALUGUEIS?: AluguelUncheckedUpdateManyWithoutPRODUTONestedInput
  }

  export type ProdutoUncheckedUpdateManyWithoutCATEGORIAInput = {
    CODPROD?: IntFieldUpdateOperationsInput | number
    CODIGO?: NullableStringFieldUpdateOperationsInput | string | null
    DESCRICAO?: NullableStringFieldUpdateOperationsInput | string | null
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AluguelCreateManyCLIENTEInput = {
    CODALU?: number
    STATUS?: number | null
    DATAINICIO: Date | string
    DATAFINAL: Date | string
    ENDERECO: string
    PRECOINICIAL: number
    CODPROD?: number | null
    DATAINC?: Date | string
    DATAALT?: Date | string | null
  }

  export type AluguelUpdateWithoutCLIENTEInput = {
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    PRODUTO?: ProdutoUpdateOneWithoutALUGUEISNestedInput
    FATURADO?: FaturadoUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelUncheckedUpdateWithoutCLIENTEInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODPROD?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FATURADO?: FaturadoUncheckedUpdateOneWithoutALUGUELNestedInput
  }

  export type AluguelUncheckedUpdateManyWithoutCLIENTEInput = {
    CODALU?: IntFieldUpdateOperationsInput | number
    STATUS?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINICIO?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAFINAL?: DateTimeFieldUpdateOperationsInput | Date | string
    ENDERECO?: StringFieldUpdateOperationsInput | string
    PRECOINICIAL?: FloatFieldUpdateOperationsInput | number
    CODPROD?: NullableIntFieldUpdateOperationsInput | number | null
    DATAINC?: DateTimeFieldUpdateOperationsInput | Date | string
    DATAALT?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProdutoCountOutputTypeDefaultArgs instead
     */
    export type ProdutoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteCountOutputTypeDefaultArgs instead
     */
    export type ClienteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoginDefaultArgs instead
     */
    export type LoginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoginDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoDefaultArgs instead
     */
    export type ProdutoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AluguelDefaultArgs instead
     */
    export type AluguelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AluguelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FaturadoDefaultArgs instead
     */
    export type FaturadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FaturadoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}